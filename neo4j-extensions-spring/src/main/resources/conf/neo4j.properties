# Default values for the low-level graph engine
use_memory_mapped_buffers=false
neostore.nodestore.db.mapped_memory=128M
neostore.relationshipstore.db.mapped_memory=128M
neostore.propertystore.db.mapped_memory=128M
neostore.propertystore.db.strings.mapped_memory=128M
neostore.propertystore.db.arrays.mapped_memory=128M
neostore.propertystore.db.index.keys.mapped_memory=8M
neostore.propertystore.db.index.mapped_memory=8M


# Keep logical logs, helps debugging but uses more disk space, enabled for
# legacy reasons To limit space needed to store historical logs use values such
# as: "7 days" or "100M size" instead of "true"
keep_logical_logs=3 days

# Autoindexing

# Enable auto-indexing for nodes, default is false
#node_auto_indexing=true

# The node property keys to be auto-indexed, if enabled
#node_keys_indexable=name,age

# Enable auto-indexing for relationships, default is false
#relationship_auto_indexing=true

# The relationship property keys to be auto-indexed, if enabled
#relationship_keys_indexable=name,age

# Enable online backups to be taken from this database.
online_backup_enabled=true

# Port to listen to for incoming backup requests.
online_backup_server=127.0.0.1:6362

# Uncomment and specify these lines for running Neo4j in High Availability mode.
# See the High availability setup tutorial for more details on these settings
# http://docs.neo4j.org/chunked/stable/ha-setup-tutorial.html

# ha.server_id is a unique integer for each instance of the Neo4j database in
# the cluster (as opposed to the coordinator instance IDs).
ha.server_id=1

# ha.initial_hosts is a comma-separated list (without spaces) of the host:port
# of where to find one or more of the known Cluster members, if they are
# already present. If none of them can be contacted the cluster will be formed
# by this instance.
# Avoid localhost due to IP resolution issues on some systems.
# Addresses w/o host (:<port>) will use the localhost IP.
ha.discovery.enabled=false
ha.initial_hosts=127.0.0.1:5001

# IP and port for this instance to bind to to communicate data with the
# other neo4j instances in the cluster. This is broadcasted to the other
# cluster members, so different members can have different communication ports.
# Avoid localhost due to IP resolution issues on some systems.
# Addresses w/o host (:<port>) will use the localhost IP.
ha.server=127.0.0.1:6001

# IP and port for this instance to bind to, for communicating cluster
# information with the rest of the instances. This will be communicated to the
# rest of the instances via normal cluster traffic but for an instance to join
# a cluster it must already know at least one other instance.
# Port ranges as well as single ports is supported.
# Avoid localhost due to IP resolution issues on some systems.
# Addresses w/o host (:<port>) will use the localhost IP.
# See also ha.initial_hosts
ha.cluster_server=127.0.0.1:5001

# The interval at which slaves will pull updates from the master. Comment out
# the option to disable periodic pulling of updates. Unit is seconds.
ha.pull_interval=10s

# Amount of slaves the master will try to push a transaction to upon commit
# (default is 1). The master will optimistically continue and not fail the
# transaction even if it fails to reach the push factor. Setting this to 0 will
# increase write performance when writing through master but could potentially
# lead to branched data (or loss of transaction) if the master goes down.
ha.tx_push_factor=1

# Strategy the master will use when pushing data to slaves (if the push factor
# is greater than 0). There are two options available "fixed" (default) or
# "round_robin". Fixed will start by pushing to slaves ordered by server id
# (highest first) improving performance since the slaves only have to cache up
# one transaction at a time.
ha.tx_push_strategy=fixed

# Policy for how to handle branched data.
# keep_last or keep_all or keep_none
ha.branched_data_policy=keep_last

# Default timeout used for clustering timeouts. Override specific timeout settings
# with proper values if necessary. This value is the default value for settings 
# ha.heartbeat_interval, ha.paxos_timeout and ha.learn_timeout.
ha.default_timeout=6s

# How often heartbeat messages should be sent. Defaults to ha.default_timeout.
ha.heartbeat_interval=6s

# Timeout for heartbeats between cluster members. Should be at least twice that of
# ha.heartbeat_interval.
ha.heartbeat_timeout=14s

# Timeout for broadcasting values in cluster. Must consider end-to-end duration 
# of Paxos algorithm. This value is the default value for settings ha.join_timeout and ha.leave_timeout.
ha.broadcast_timeout=45s

# Timeout for joining a cluster. Defaults to ha.broadcast_timeout.
ha.join_timeout=45s

# Timeout for waiting for configuration from an existing cluster member during cluster join.
ha.configuration_timeout=4s

# Timeout for waiting for cluster leave to finish. Defaults to ha.broadcast_timeout.
ha.leave_timeout=45s

# Default timeout for all Paxos timeouts. Defaults to ha.default_timeout. 
# This value is the default value for settings ha.phase1_timeout, ha.phase2_timeout and ha.election_timeout. 
ha.paxos_timeout=6s

# Timeout for Paxos phase 1. Defaults to ha.paxos_timeout.
ha.phase1_timeout=6s

# Timeout for Paxos phase 2. Defaults to ha.paxos_timeout.
ha.phase2_timeout=6s

# Timeout for learning values. Defaults to ha.default_timeout.
ha.learn_timeout=6s

# Timeout for waiting for other members to finish a role election. Defaults to ha.paxos_timeout.
ha.election_timeout=6s

# How long a slave will wait for response from master before giving up.
ha.read_timeout=40s

# Timeout for waiting for instance to become master or slave.
ha.state_switch_timeout=40s

# Timeout for taking remote (write) locks on slaves. Defaults to ha.read_timeout.
ha.lock_read_timeout=20s

# Maximum number of connections a slave can have to the master.
ha.max_concurrent_channels_per_slave=20

# Whether this instance should only participate as slave in cluster.
# If set to true, it will never be elected as master.
ha.slave_only=false

# Max size of the data chunks that flows between master and slaves in HA.
# Bigger size may increase throughput, but may be more sensitive to variations 
# in bandwidth, whereas lower size increases tolerance for bandwidth variations.
ha.com_chunk_size=1M

# Enable this to be able to upgrade a store from 1.4 -> 1.5 or 1.4 -> 1.6
allow_store_upgrade=false

# Enable this to specify a parser other than the default one.
#cypher_parser_version=2.0

# Enable shell server so that remote clients can connect vi Neo4j shell.
remote_shell_enabled=true
# Specify custom shell port (default is 1337).
remote_shell_port=11337

cache_type=hpc
node_cache_array_fraction=6
relationship_cache_array_fraction=6
node_cache_size=1G
relationship_cache_size=1G

# Avoid long query kills the server
execution_guard_enabled=true

# Disable usage data collector
neo4j.ext.udc.disabled=true
